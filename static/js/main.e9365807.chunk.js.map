{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","handleSearch","onSubmit","className","type","ref","name","value","placeholder","onChange","Component","TodoItem","todo","handleEdit","handleDelete","onClick","React","TodoList","todos","clearList","map","key","id","App","state","editItem","uuid","search","createRef","e","setState","target","preventDefault","filteredTodo","find","console","log","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e9365807.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport 'font-awesome/css/font-awesome.min.css'\n\nexport default class TodoInput extends Component {\n    render() {\n        const { item, handleChange, handleSubmit, handleSearch } = this.props;\n        return (\n            <div>\n                <form onSubmit={handleSubmit}>\n                    <div className=\"input-group\">\n                        <div className=\"input-group-prepend\">\n                            <div className=\"input-group-text bg-primary text-white\">\n                                <i className=\"fa fa-book\"></i>\n                            </div>\n                        </div>\n                        <input \n                        type=\"text\"\n                        ref=\"name\"\n                        name=\"name\"\n                        value={item ? item : ''}\n                        placeholder=\"Add New Items\"\n                        className=\"form-control\" \n                        onChange={handleChange}\n                        />\n                    </div>\n                    <button \n                    type=\"submit\"\n                    className={item ? 'btn btn-warning btn-block mt-3' : 'btn btn-success btn-block mt-3'}\n                    >\n                    Submit\n                    </button>\n                </form>\n\n                <input \n                type=\"search\" \n                className=\"form-control mt-3\" \n                name=\"search\" \n                placeholder=\"Search\"\n                onChange={handleSearch}\n                />\n                \n            </div>\n        )\n    }\n}\n","import React from 'react'\n\nexport default class TodoItem extends React.Component {\n    render() {\n        const { todo, handleEdit, handleDelete } =this.props;\n        return (\n            <li className=\"list-group-item text-capitalize d-flex justify-content-between\">\n                { todo.name }\n                <div>\n                    <span onClick={handleEdit}>\n                        <i className=\"fa fa-pencil text-warning mr-3\"></i>\n                    </span>\n                    <span onClick={handleDelete}>\n                        <i className=\"fa fa-trash text-danger\"></i>\n                    </span>\n                </div>\n            </li>\n        )\n    }\n}\n","import React from 'react'\nimport TodoItem from './TodoItem'\n\nexport default class TodoList extends React.Component {\n    render() {\n        const { todos, clearList, handleDelete, handleEdit} = this.props;\n        return (\n            <ul className=\"list-group my-3\">\n                <h3>List</h3>\n                {todos.map(todo => \n                <TodoItem \n                key = {todo.id}\n                todo = {todo}\n                handleDelete = {handleDelete(todo.id)}\n                handleEdit = {handleEdit(todo.id)}\n                />\n                )}    \n                <button onClick={clearList} className=\"btn btn-block btn-danger mt-3\">CLEAR ALL LIST</button>          \n            </ul>\n        )\n    }\n}","import React from 'react';\nimport { v4 as uuid } from 'uuid';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\n\nclass App extends React.Component {\n\n  state = {\n    todos: [\n      {id: 1, name: 'Buy Fruits', editItem: false},\n      {id: 2, name: 'Cleaning House', editItem: false},\n    ],\n    id: uuid(),\n    item: '',\n    editItem: false,\n    search: '',\n  }\n\n  name = React.createRef();\n\n  handleChange = (e) => {\n    this.setState({\n      item: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.setState({\n      todos: [\n        ...this.state.todos,\n        {id: this.state.id, name: this.state.item, editItem: false}\n      ],\n      item: '',\n      id:uuid(),\n      editItem:false\n    })\n  }\n\n  handleEdit = (id) => () => {\n    const filteredTodo = this.state.todos.find(todo => todo.id === id);\n    console.log(filteredTodo);\n    this.setState({\n      todos : this.state.todos.filter( todo => todo.id !== id),\n      item : filteredTodo.name,\n      id: id,\n      editItem: true,\n    })\n    console.log('todos state', this.state.todos);\n  }\n  handleDelete = (id) => () => {\n    this.setState({\n      todos: this.state.todos.filter( todo => todo.id !== id )\n    });\n  }\n  clearList = () => {\n    this.setState({\n      todos:[]\n    })\n  }\n\n  handleSearch = (e) => {\n    this.setState({ search: e.target.value })\n  }\n\n  render() {\n    const filter = this.state.todos.filter( todo => \n      todo.name.toLowerCase().includes(this.state.search.toLowerCase())\n      );\n      return (\n        <div className=\"container col-lg-8 my-3\">\n        <h3>React ToDo List</h3>\n        <TodoInput \n        id = {this.state.id}\n        item = {this.state.item}\n        handleChange = {this.handleChange}\n        handleSubmit = {this.handleSubmit}\n        handleSearch = {this.handleSearch}\n        />\n        <TodoList \n        todos = {filter}\n        clearList = {this.clearList}\n        handleDelete = {this.handleDelete}\n        handleEdit = {this.handleEdit}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}